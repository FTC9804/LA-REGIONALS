package com.qualcomm.ftcrobotcontroller.opmodes;

//import OpModes

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.DigitalChannelController;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

// Made by the programmers of FTC Team 9804 Bomb Squad on January 27, 2016
//V02 6 pm 1-28-16
// renamed to TeleOp_9804_v1 (for Qualifier!) on 1-29-16 at 12:37 PM
// Steve C.


public class TeleOp_9804_v1 extends OpMode {

    //defining the motors, servos, and variables in this program

    //magnetic sensor
    DigitalChannel sensorExtend;        // detects magnet, arms fully extended
    DigitalChannel sensorRetract;       // detects magnet, arms fully retracted
    DigitalChannel extendLED;           // these are indicator LEDs
    DigitalChannel retractLED;

    //drive motors
    DcMotor driveLeftBack;
    DcMotor driveLeftFront;
    DcMotor driveRightBack;
    DcMotor driveRightFront;

    //winch motors
    DcMotor leftWinch;
    DcMotor rightWinch;

    //motors for extending arms and spinner (debris collector)
    DcMotor arms;
    DcMotor spin;

    //servos to lock in place on ramp
    Servo grabLeft;
    Servo grabRight;

    //servo to release debris
    Servo score;

    //hits climbers with drop arm
    Servo drop;

    //sets hooks up for final climb - may not be needed
    // Servo hooks;

    //variables for driving
    float trailingPowerRight;
    double leadingPowerRight;
    float trailingPowerLeft;
    double leadingPowerLeft;

    int telemetryVariable;   // always needed for display?

    double grabLeftUp = 0;
    double grabLeftDown = 0.5;
    double grabRightUp = 0.5;
    double grabRightDown = 0;

    double scoreUp = 0;
    double scoreDown = 1.0;

    double dropUp = 0;
    double dropDown = 1.0;
    double hooksUp = 0;
    double hooksDown = 1.0;

    boolean armsNotExtended = true; // state of magnetic sensors
    boolean armsNotRetracted = true;

    boolean becameExtended = true; //flags to indicate arms reached limit
    boolean becameRetracted = true;

    @Override
    public void init() {
        //gives name of magnetic sensor
        sensorExtend = hardwareMap.digitalChannel.get("mag1");
        sensorRetract = hardwareMap.digitalChannel.get("mag2");
        extendLED = hardwareMap.digitalChannel.get("led1");
        retractLED = hardwareMap.digitalChannel.get("led2");
        extendLED.setMode(DigitalChannelController.Mode.OUTPUT);
        retractLED.setMode(DigitalChannelController.Mode.OUTPUT);
        retractLED.setState(false);                   // LEDs initialized "off"
        extendLED.setState(false);

        //gives name of drive motors
        driveLeftBack = hardwareMap.dcMotor.get("m5");      // 1 on red controller SN VUTK
    //    driveLeftFront = hardwareMap.dcMotor.get("m6");     // 2 on red
        driveRightBack = hardwareMap.dcMotor.get("m1");     // 1 on purple controller SN UVQF
      //  driveRightFront = hardwareMap.dcMotor.get("m2");    // 2 on purple

        // set direction of L and R drive motors, since they are opposite-facing
        //driveRightFront.setDirection(DcMotor.Direction.FORWARD);  // right side forward with positive voltage
        driveRightBack.setDirection(DcMotor.Direction.FORWARD);
        driveLeftBack.setDirection(DcMotor.Direction.REVERSE);    // so we reverse the left side
        //driveLeftFront.setDirection(DcMotor.Direction.REVERSE);

        //gives motor names for the other motors
        arms = hardwareMap.dcMotor.get("m7");               // 1 on green controller SN VF7F
        spin = hardwareMap.dcMotor.get("m8");              // 2 on green

/*      commented out, only for TestBot.  Put this back in for real robot.

        leftWinch  = hardwareMap.dcMotor.get("m3");         // 1 on orange controller SN XTJI
        rightWinch  = hardwareMap.dcMotor.get("m4");        // 2 on orange
*/

        //give the servo names for the servos
        grabLeft = hardwareMap.servo.get("s1");             // xx on servo controller SN VSI1
        grabRight = hardwareMap.servo.get("s2");            // xx on servo controller
        score = hardwareMap.servo.get("s3");
        drop = hardwareMap.servo.get("s4");
        // hooks = hardwareMap.servo.get("s5");

        grabLeft.setPosition(grabLeftUp);
        grabRight.setPosition(grabRightUp);
        score.setPosition(scoreUp);
        drop.setPosition(dropUp);
        //hooks.setPosition(hooksUp);

        //reset timer for match
        this.resetStartTime();
    }

    @Override
    public void loop() {
        //creates boolean value for magnetic sensor,
        //true = no magnet detected nearby
        //false = have reached limit
        armsNotExtended = sensorExtend.getState();
        armsNotRetracted = sensorRetract.getState();
        //telemetry for magnetic sensor
        telemetry.addData("Extended Sensor", String.format("%1d", (armsNotExtended ? 1 : 0))); //maybe add the word key after the string
        telemetry.addData("Retracted Sensor", String.format("%1d", (armsNotRetracted ? 1 : 0)));

        //takes input from joysticks for motor values;
        // sets the front wheel at a lesser power to ensure belt tension
        trailingPowerLeft = gamepad1.left_stick_y;
        //leadingPowerLeft = .95 * trailingPowerLeft;
        trailingPowerRight = gamepad1.right_stick_y;
        //leadingPowerRight = .95 * trailingPowerRight;
        driveLeftBack.setPower(trailingPowerLeft);
        driveRightBack.setPower(trailingPowerRight);
//        if (leadingPowerLeft > 0.1) {                   // ignore dead zone on joystick
//            driveLeftBack.setPower(trailingPowerLeft);
//            driveLeftFront.setPower(leadingPowerLeft);
//        } else if (leadingPowerLeft < -0.1) {
//            driveLeftBack.setPower(leadingPowerLeft);
//            driveLeftFront.setPower(trailingPowerLeft);
//        } else {
//            driveLeftFront.setPower(0);
//            driveLeftBack.setPower(0);
//        }
//        if (leadingPowerRight > 0.1) {
//            driveRightBack.setPower(trailingPowerRight);
//            driveRightFront.setPower(leadingPowerRight);
//        } else if (leadingPowerRight < -0.1) {
//            driveRightBack.setPower(leadingPowerRight);
//            driveRightFront.setPower(trailingPowerRight);
//        } else {
//            driveRightBack.setPower(0);
//            driveRightFront.setPower(0);
//        }
/*  COMMENTED OUT FOR TEST BOT, ADD BACK IN FOR COMPETITION BOT
        //only allows winch to be run in the last 30 seconds of the match
        if (this.getRuntime() > 90) {
            rightWinch.setPower(gamepad2.right_stick_y);
            leftWinch.setPower(gamepad2.left_stick_y);
        }
        else {
            rightWinch.setPower(0);
            leftWinch.setPower(0);
        }
*/


        if(armsNotRetracted) {
            retractLED.setState(false);
        }
        else {
            retractLED.setState(true);
        }
        if (armsNotExtended) {
            extendLED.setState(false);
        }
        else {
            extendLED.setState(true);
        }


        if (gamepad2.dpad_up && armsNotExtended) {
            arms.setPower(1);
        }
        else if (gamepad2.dpad_down && armsNotRetracted) {
            arms.setPower(-1);
        }
        else {
            arms.setPower(0);
        }





/*        //only allows arms to go while the boolean for the magnetic sensor is false
        if (gamepad2.dpad_up && armsNotExtended) {
            arms.setPower(1);
            boolean becameExtended = false;
            retractLED.setState(false);
            extendLED.setState(false);
            telemetry.clearData();
        } else if (!armsNotExtended && !becameExtended) {
            telemetry.addData("EXTENDED ALL THE WAY", telemetryVariable);
            arms.setPower(0);
            retractLED.setState(false);
            extendLED.setState(true);
            boolean becameExtended = true;
        } else if (gamepad2.dpad_down && armsNotRetracted) {
            arms.setPower(-1);
            boolean becameRetracted = false;
            retractLED.setState(false);
            extendLED.setState(false);
            telemetry.clearData();
        } else if (!armsNotRetracted && !becameRetracted) {
            telemetry.addData("RETRACTED ALL THE WAY", telemetryVariable);
            arms.setPower(0);
            retractLED.setState(true);
            extendLED.setState(false);
            boolean becameRetracted = true;
        } else {
            arms.setPower(0);
            retractLED.setState(false);
            extendLED.setState(false);
        }

        */
        //takes input from buttons for spin motors
        if (gamepad2.a) {                   //collect debris
            spin.setPower(-1);
        } else if (gamepad2.y) {            //eject or sweep away debris
            spin.setPower(1);
        } else {
            spin.setPower(0);
        }

        /*

        //takes input from bumpers and triggers for the locking grab motors set individually
        if (gamepad1.right_bumper) {
            grabRight.setPosition(grabRightUp);
        } else if (gamepad1.right_trigger > .3) {
            grabRight.setPosition(grabRightDown);
        }



        if (gamepad1.left_bumper) {
            grabLeft.setPosition(grabLeftUp);
        } else if (gamepad1.left_trigger > .3) {
            grabLeft.setPosition(grabLeftDown);
        }

        */


        //THIS SECTION IS FOR TEST BOT ONLY, CR SERVOS INSTEAD OF CONVENTIONAL SERVOS
        // takes input from bumpers and triggers for the locking grab motors set individually
        if (gamepad1.right_bumper) {
            grabRight.setPosition(.7);                      //ROTATE SLOWLY CW
        } else if (gamepad1.right_trigger > .3) {
            grabRight.setPosition(.3);                      //ROTATE SLOWLY CCW
        } else {
            grabRight.setPosition(.5);
        }
        if (gamepad1.left_bumper) {
            grabLeft.setPosition(.7);
        } else if (gamepad1.left_trigger > .3) {
            grabLeft.setPosition(.3);
        } else {
            grabLeft.setPosition(.5);
        }

        //sets score to a value because a button is pressed
        if (gamepad1.a) {
            score.setPosition(scoreDown);
        } else { //if (gamepad1.y) {
            score.setPosition(scoreUp);
        }
        //sets drop to a value because a button is pressed
        if (gamepad2.b) {
            drop.setPosition(dropDown);
        } else { //if (gamepad2.x) {
            drop.setPosition(dropUp);
        }



/*  COMMENTED OUT AS HOOKS MAY NOT BE USED
        //takes input from bumpers and triggers for the hook motors set individually
        if (gamepad2.left_trigger > .10 || gamepad2.right_trigger > .10){
            hooks.setPosition(hooksDown);
        }
        else { //if (gamepad2.left_bumper || gamepad2.right_bumper){
            hooks.setPosition(hooksUp);
        }
        */
    }
}
